/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 public/models/chair.gltf -o components/chair.tsx --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useConfigurations } from "@/contexts/Configurations";

type GLTFResult = GLTF & {
	nodes: {
		Chair: THREE.Mesh;
		Cushion: THREE.Mesh;
		Legs1: THREE.Mesh;
		Legs2: THREE.Mesh;
	};
	materials: {
		Chair: THREE.MeshStandardMaterial;
		Cushion: THREE.MeshStandardMaterial;
		Legs: THREE.MeshStandardMaterial;
	};
};

type ContextType = Record<
	string,
	React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Chair(props: JSX.IntrinsicElements["group"]) {
	const { material, legs, chairColor, cushionColor } = useConfigurations();

	const { nodes, materials } = useGLTF("models/chair.gltf") as GLTFResult;

	const leatherTexture_Props = useTexture({
		map: "textures/leather/Leather_008_Base Color.jpg",
		normalMap: "textures/leather/Leather_008_Normal.jpg",
		roughnessMap: "textures/leather/Leather_008_Roughness.jpg",
		aoMap: "textures/leather/Leather_008_Ambient Occlusion.jpg",
	});

	//leatherTexture_Props.map.repeat.set(3, 3);
	leatherTexture_Props.normalMap.repeat.set(3, 3);
	leatherTexture_Props.roughnessMap.repeat.set(3, 3);
	leatherTexture_Props.aoMap.repeat.set(3, 3);

	leatherTexture_Props.map.wrapS = leatherTexture_Props.map.wrapT =
		THREE.RepeatWrapping;
	leatherTexture_Props.normalMap.wrapS = leatherTexture_Props.normalMap.wrapT =
		THREE.RepeatWrapping;
	leatherTexture_Props.roughnessMap.wrapS =
		leatherTexture_Props.roughnessMap.wrapT = THREE.RepeatWrapping;
	leatherTexture_Props.aoMap.wrapS = leatherTexture_Props.aoMap.wrapT =
		THREE.RepeatWrapping;

	const fabricTexture_Props = useTexture({
		//	map: "textures/fabric/Fabric_knitted_006_basecolor.jpg",
		normalMap: "textures/fabric/Fabric_Knitted_006_normal.jpg",
		roughnessMap: "textures/fabric/Fabric_Knitted_006_roughness.jpg",
		aoMap: "textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg",
	});

	//fabricTexture_Props.map.repeat.set(3, 3);
	fabricTexture_Props.normalMap.repeat.set(3, 3);
	fabricTexture_Props.roughnessMap.repeat.set(3, 3);
	fabricTexture_Props.aoMap.repeat.set(3, 3);

	//fabricTexture_Props.map.wrapS = fabricTexture_Props.map.wrapT =
	THREE.RepeatWrapping;
	fabricTexture_Props.normalMap.wrapS = fabricTexture_Props.normalMap.wrapT =
		THREE.RepeatWrapping;
	fabricTexture_Props.roughnessMap.wrapS =
		fabricTexture_Props.roughnessMap.wrapT = THREE.RepeatWrapping;
	fabricTexture_Props.aoMap.wrapS = fabricTexture_Props.aoMap.wrapT =
		THREE.RepeatWrapping;

	return (
		<group {...props} dispose={null}>
			<mesh geometry={nodes.Chair.geometry}>
				<meshStandardMaterial
					{...(material === "leather"
						? leatherTexture_Props
						: fabricTexture_Props)}
					color={chairColor.color}
				/>
			</mesh>

			<mesh geometry={nodes.Cushion.geometry} position={[0, 0.064, 0.045]}>
				<meshStandardMaterial
					{...fabricTexture_Props}
					color={cushionColor.color}
				/>
			</mesh>
			<mesh
				geometry={nodes.Legs1.geometry}
				material={materials.Legs}
				visible={legs === 1}
			/>
			<mesh
				geometry={nodes.Legs2.geometry}
				material={materials.Legs}
				visible={legs === 2}
			/>
		</group>
	);
}

useGLTF.preload("/chair.gltf");
